// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: signer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7


// SignerServiceClient is the client API for SignerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignerServiceClient interface {
	StreamSignRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SignerService_StreamSignRequestsClient, error)
	ReportSignResult(ctx context.Context, in *SignResult, opts ...grpc.CallOption) (*Empty, error)
}

type signerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignerServiceClient(cc grpc.ClientConnInterface) SignerServiceClient {
	return &signerServiceClient{cc}
}

func (c *signerServiceClient) StreamSignRequests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (SignerService_StreamSignRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignerService_ServiceDesc.Streams[0], "/signer.SignerService/StreamSignRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &signerServiceStreamSignRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SignerService_StreamSignRequestsClient interface {
	Recv() (*SignRequest, error)
	grpc.ClientStream
}

type signerServiceStreamSignRequestsClient struct {
	grpc.ClientStream
}

func (x *signerServiceStreamSignRequestsClient) Recv() (*SignRequest, error) {
	m := new(SignRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signerServiceClient) ReportSignResult(ctx context.Context, in *SignResult, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/signer.SignerService/ReportSignResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServiceServer is the server API for SignerService service.
// All implementations must embed UnimplementedSignerServiceServer
// for forward compatibility.
type SignerServiceServer interface {
	StreamSignRequests(*Empty, SignerService_StreamSignRequestsServer) error
	ReportSignResult(context.Context, *SignResult) (*Empty, error)
	mustEmbedUnimplementedSignerServiceServer()
}

// UnimplementedSignerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignerServiceServer struct{}

func (UnimplementedSignerServiceServer) StreamSignRequests(*Empty, SignerService_StreamSignRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSignRequests not implemented")
}
func (UnimplementedSignerServiceServer) ReportSignResult(context.Context, *SignResult) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSignResult not implemented")
}
func (UnimplementedSignerServiceServer) mustEmbedUnimplementedSignerServiceServer() {}

// UnsafeSignerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignerServiceServer will
// result in compilation errors.
type UnsafeSignerServiceServer interface {
	mustEmbedUnimplementedSignerServiceServer()
}

func RegisterSignerServiceServer(s grpc.ServiceRegistrar, srv SignerServiceServer) {
	s.RegisterService(&SignerService_ServiceDesc, srv)
}

func _SignerService_StreamSignRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignerServiceServer).StreamSignRequests(m, &signerServiceStreamSignRequestsServer{stream})
}

type SignerService_StreamSignRequestsServer interface {
	Send(*SignRequest) error
	grpc.ServerStream
}

type signerServiceStreamSignRequestsServer struct {
	grpc.ServerStream
}

func (x *signerServiceStreamSignRequestsServer) Send(m *SignRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _SignerService_ReportSignResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).ReportSignResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signer.SignerService/ReportSignResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).ReportSignResult(ctx, req.(*SignResult))
	}
	return interceptor(ctx, in, info, handler)
}

// SignerService_ServiceDesc is the grpc.ServiceDesc for SignerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signer.SignerService",
	HandlerType: (*SignerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportSignResult",
			Handler:    _SignerService_ReportSignResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSignRequests",
			Handler:       _SignerService_StreamSignRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "signer.proto",
}
