// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: signer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_signer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{0}
}

type SignRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	DownloadUrl   string                 `protobuf:"bytes,3,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	UploadUrl     string                 `protobuf:"bytes,4,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	mi := &file_signer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{1}
}

func (x *SignRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SignRequest) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *SignRequest) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type SignResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignResult) Reset() {
	*x = SignResult{}
	mi := &file_signer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResult) ProtoMessage() {}

func (x *SignResult) ProtoReflect() protoreflect.Message {
	mi := &file_signer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResult.ProtoReflect.Descriptor instead.
func (*SignResult) Descriptor() ([]byte, []int) {
	return file_signer_proto_rawDescGZIP(), []int{2}
}

func (x *SignResult) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SignResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_signer_proto protoreflect.FileDescriptor

const file_signer_proto_rawDesc = "" +
	"\n" +
	"\fsigner.proto\x12\x06signer\"\a\n" +
	"\x05Empty\"\x8b\x01\n" +
	"\vSignRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\x12!\n" +
	"\fdownload_url\x18\x03 \x01(\tR\vdownloadUrl\x12\x1d\n" +
	"\n" +
	"upload_url\x18\x04 \x01(\tR\tuploadUrl\"_\n" +
	"\n" +
	"SignResult\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage2\x82\x01\n" +
	"\rSignerService\x12:\n" +
	"\x12StreamSignRequests\x12\r.signer.Empty\x1a\x13.signer.SignRequest0\x01\x125\n" +
	"\x10ReportSignResult\x12\x12.signer.SignResult\x1a\r.signer.EmptyB)Z'github.com/YHVCorp/signer-service/protob\x06proto3"

var (
	file_signer_proto_rawDescOnce sync.Once
	file_signer_proto_rawDescData []byte
)

func file_signer_proto_rawDescGZIP() []byte {
	file_signer_proto_rawDescOnce.Do(func() {
		file_signer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_signer_proto_rawDesc), len(file_signer_proto_rawDesc)))
	})
	return file_signer_proto_rawDescData
}

var file_signer_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_signer_proto_goTypes = []any{
	(*Empty)(nil),       // 0: signer.Empty
	(*SignRequest)(nil), // 1: signer.SignRequest
	(*SignResult)(nil),  // 2: signer.SignResult
}
var file_signer_proto_depIdxs = []int32{
	0, // 0: signer.SignerService.StreamSignRequests:input_type -> signer.Empty
	2, // 1: signer.SignerService.ReportSignResult:input_type -> signer.SignResult
	1, // 2: signer.SignerService.StreamSignRequests:output_type -> signer.SignRequest
	0, // 3: signer.SignerService.ReportSignResult:output_type -> signer.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_signer_proto_init() }
func file_signer_proto_init() {
	if File_signer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_signer_proto_rawDesc), len(file_signer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_signer_proto_goTypes,
		DependencyIndexes: file_signer_proto_depIdxs,
		MessageInfos:      file_signer_proto_msgTypes,
	}.Build()
	File_signer_proto = out.File
	file_signer_proto_goTypes = nil
	file_signer_proto_depIdxs = nil
}
